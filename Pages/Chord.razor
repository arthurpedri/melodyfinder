@page "/chord"
@inject IJSRuntime JS
@inject MelodyFinder.Services.MusicService MusicService

<PageTitle>Chord</PageTitle>


<h1>Chord Identification</h1>
<button @onclick="GenerateChord" class="generate-button">Generate</button>

<button @onclick="() => showQuality = !showQuality" class="show-button">@((showQuality ? "Hide" : "Show") + " Quality")</button>

<button @onclick="() => showRoot = !showRoot" class="show-button">@((showRoot ? "Hide" : "Show") + " Root")</button>

<button @onclick="() => showNotation = !showNotation" class="show-button">@((showNotation ? "Hide" : "Show") + " Notation")</button>

@if (showRoot)
{
    <h3 id="note-info" >Root: @root</h3>
}
@if (showQuality)
{
    <h3 id="note-info" >Quality: @readableQuality</h3>
}


<div id="notation" style="display:@(showNotation ? "block" : "none")"></div>

<div id="audio-controls"></div>

<button class="play-button" @onclick="PlayChord">Play</button>
<button class="play-button" @onclick="PlayArpeggiatedChord">Play Arpeggio</button>

@code {
    bool showRoot = false;
    bool showQuality = false;
    bool showNotation = false;
    private string readableQuality = "maj";
    private string chord = "C";
    private string chordQuality = "maj";
    private int inversion = 0; // 0 for root position, 1 for first
    private string root = "C";

    private string abc = "X:1\nQ:80\nT:Single Chord\nM:4/4\nK:C\n[CEG]4|";
    private string abcArpeggio = "X:1\nQ:100\nT:Arpeggio Chord\nM:4/4\nK:C\nV:1\nC4 |\nV:2\nz E3 |\nV:3\nz z G2  |";

    private void GenerateChord()
    {
        (chord, chordQuality, inversion, (abc, abcArpeggio)) = MusicService.GenerateRandomChord();
        abc = "X:1\nQ:80\nT:Single Chord\nM:4/4\nK:C\n" + abc + "|";
        abcArpeggio = "X:1\nQ:100\nT:Arpeggiated Chord\nM:4/4\nK:C\n" + abcArpeggio;
        switch (inversion)
        {
            case 1:
            readableQuality = chordQuality + " (1st inversion)";
                break;
            case 2:
            readableQuality = chordQuality + " (2nd inversion)";
                break;
            default:
            readableQuality = chordQuality;
                break;
        }
        root = chord;

    }


    async Task PlayChord()
    {
        await JS.InvokeVoidAsync("musicInterop.playABC", abc);
    }

    async Task PlayArpeggiatedChord()
    {
        await JS.InvokeVoidAsync("musicInterop.playABC", abcArpeggio);
    }
    

}
