@page "/"
@page "/melody"
@inject IJSRuntime JS
@inject MelodyFinder.Services.MusicService MusicService

<PageTitle>Melody</PageTitle>

<h1>Melody Generator</h1>

<button @onclick="GenerateMelody" class="generate-button">Generate</button>

<button @onclick="() => showKey = !showKey" class="show-button">@((showKey ? "Hide" : "Show") + " Key")</button>

<button @onclick="() => showScoreInfo = !showScoreInfo" class="show-button">@((showScoreInfo ? "Hide" : "Show") + " Score Info")</button>

<button @onclick="() => showNotation = !showNotation" class="show-button">@((showNotation ? "Hide" : "Show") + " Notation")</button>

@if (showKey)
{
    <h3 id="key-info" >@(abc.Split("\n")[4])</h3>
}




@if (showScoreInfo)
{
    <h3 id="score-info" >Score Information: @abc</h3>
}


<div id="notation" style="display:@(showNotation ? "block" : "none")"></div>


<div id="audio-controls"></div>

<button class="play-button" @onclick="PlayMelody">Play</button>

@code {
    bool showScoreInfo = false;
    bool showNotation = false;
    bool showKey = false;
    // As stated, immediately following the K: field on the next line is the body of the tune, eg the representation of the notes of the melody.
    private string abc = "X:1\nQ:80\nT:Simple Scale\nM:4/4\nK:G\n[C2E2G2][D2F2A2][GBd][FAd][E2G2B2]||";

// TODO: Create method to generate chord progressions based on common progressions and randomize the key


    private void GenerateMelody()
    {
        abc = MusicService.GenerateMelody();
    }

    async Task PlayMelody()
    {
        await JS.InvokeVoidAsync("musicInterop.playABC", abc);
    }
}
